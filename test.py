from jwcrypto import jwt, jwk, jwe
import base64

# Token and keys
jwt_token = "eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCIsImtpZCI6ImZkNjE4NzMzLTAxYTMtNDAwMC1iMzc0LWYyMDYwYjQyMWJlNSIsIm9yZy5hcGVyZW8uY2FzLnNlcnZpY2VzLlJlZ2lzdGVyZWRTZXJ2aWNlIjoiMTAwMDAwMDEifQ.ZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1qVTJRMEpETFVoVE5URXlJaXdpWTNSNUlqb2lTbGRVSWl3aWRIbHdJam9pU2xkVUlpd2lhMmxrSWpvaU5ETmxOakl4WlRBdFlqQmhaQzAwWlRJd0xXRmhPREV0TmpjeU16UXdabVV4WVRRMElpd2liM0puTG1Gd1pYSmxieTVqWVhNdWMyVnlkbWxqWlhNdVVtVm5hWE4wWlhKbFpGTmxjblpwWTJVaU9pSXhNREF3TURBd01TSjkuLnpSYjRmRFpkWTFpMlFfVDQyWnRTVEEua1RwbXJqMzV2YnpTSUdGczh2bXlDc3pyU3U4OEVmd2M4cUJvVE5xeWhDbWxqM1NDeUhJQlRwOGtablFVUEZyRU43QWhiMXBlTTZCSmtLZENaX0pGN3VNeTlTZVlON05kSFVhWlFjQzBiSHREYUd1ZXVlcGRUOW40dzcwc3RqdjhuaXJSdFB1ZjV3OV9UaUxKX2VxZk9ab0dSYmxBY3A1dUJDQXZXS3FyZ29LY0RHMS10dEhDNzlCUmI0VGtNZWNicnA2ZWdNMzRlZC1JemR2VFZ6TnhoWFUzZ1hSLWNlX1F3QlFldmlfUHh4bUFiMy0zQWtUQmtYNXlZM0JPMDZyTUxaTmNzdjVScjdXNGw4OTFENHh5RWhyRm1yUmp1UGhSbGh4X1ZxYXVoekQySTdqMWJBdS12RHdNRkdQTkNKTExwNTZUSjRCbnp3elJmREhiV1FYcllRS21VYmdjZU5yU0hCM2REeU1VYWlIM3BkLTRrUFNKM0dFcGt2cGI3Z04yUEhpVThtRmMzbnZwMDVvOEdHMldyWEt1SG5rS3J6YmF3V2U2WnBTZmNYazZVZnFwcmtjNHpmY2txczBya0FqVG1rR1RxMUlFMkExd0wzWlFadldBSG1tS2VEcGZIM25NTFBCU3hSQjUtTVBwMWV6SWR4WjJKMGNaTFVzTE4yeXNhVDFtOTV3UjlXWlR2YWppOWtQRG5GdFY4eG12MVN0NnkyVEFnY3VyNi1RcUhpdmtkSm9yYjFyNkZuZ2hPSS1YSy15OUNMd1lYYlQ0NUxPREFSVkR1QkdtTjdJZ1VQMDNVVllqejdmSHpVMTF6QWlrZk9YU1ZiMXVDb0RmUWV2Rmd2WmNscmpqZFFyMmVnVllCQmZBZkUxYWpJcXhYZXI1V0FDU0otb3FoYURPY2owaGtQeVBNcU1UeWREUThiam1VWUNiRDRHVGNpQmxXV2lQZkVhSnNaNFpyZ3FvTkhnWjVha0hzSkQtUFdab1YwRlE5LVNQMi02TUZrb05DWXA5eDhqcFhHNzB1UklaLU1LcnJXM1lXdy5BV3pTVFdtd0Q1Y0JVRUszbTRQTEJpeVFmZnFsMTAwMWpNdGhYbXNrSTdn.DPxbyLZ9yX5KcsmJaUqv4OhBtmuI0wy_w9xDU7pUu4ryhss_WaaputY8XXxJ68PcZduXdxnEmsdT7SCavsH4Tw"
signing_key = b"WAayJAF/KaUxlVC5hwTsXzZiixYCQNnFItaXQlyEdgsydDZaqWPjY+nTZcVEJmJvrHhYlb7syMLRwHMTbd/5XQ=="
encryption_key= b"qt5FuyB+sTHKyQjmTT2MH4FKBxgMvh2/KcE1ja2HgxSbUCF/3nhBMuif6GHNpPJYVCMv1S7MppCm4U7fTxlhGA=="

# Split header - payload - signature
header_b64, payload_b64, signature_b64 = jwt_token.split('.')

# Prepare your JWK keys
sign_key = jwk.JWK(k=base64.b64encode(signing_key).decode(), kty="oct")
raw_encryption_key = base64.b64decode(encryption_key)
enc_key = jwk.JWK(k=base64.b64encode(raw_encryption_key[:64]).decode(), kty="oct")

# Step 1: Validate signature and deserialize
outer = jwt.JWT(key=sign_key, jwt=jwt_token)
print("JWT signature validated successfully.\n")

# Access and print the header
protected_header = outer.token.jose_header
print("JWS header:", protected_header)

# Extract nested JWE string
inner_jwe = outer.claims

# Step 2: Decrypt inner JWE
inner = jwe.JWE()
inner.deserialize(inner_jwe)
inner.decrypt(enc_key)
payload = inner.payload.decode('utfâ€‘8')
print("Decrypted payload:", payload)
